# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR Free Software Foundation, Inc.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid	""
msgstr	"Project-Id-Version: PACKAGE VERSION\n"
	"POT-Creation-Date: 2001-02-09 01:25+0100\n"
	"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
	"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
	"Language-Team: LANGUAGE <LL@li.org>\n"
	"MIME-Version: 1.0\n"
	"Content-Type: text/plain; charset=utf-8\n"
	"Content-Transfer-Encoding: ENCODING\n"

#: index.docbook:6
msgid	"&artsbuilder;"
msgstr	""

#: index.docbook:9
msgid	"Overview"
msgstr	""

#: index.docbook:11
msgid	"First of all, when trying to run &artsbuilder; , you should also be "
	"running the sound server (&artsd;). Usually, when you use &kde; 2.1, "
	"this should already be the case. If not, you can configure the "
	"automatic sound server startup in &kcontrol; under "
	"<menuchoice><guilabel>Sound</guilabel><guilabel>Sound "
	"Server</guilabel></menuchoice>."
msgstr	""

#: index.docbook:20
msgid	"When you are running &arts;, it always runs small modules. "
	"&artsbuilder; is a tool to create new structures of small connected "
	"modules. You simply click the modules inside the grid. To do so, "
	"choose them from the <guimenu>Modules</guimenu> menu, and then click "
	"somewhere in the green-grey plane."
msgstr	""

#: index.docbook:28
msgid	"Modules usually have ports (where usually audio signals are flowing "
	"in or out). To connect two ports, click on the first, which causes "
	"it to turn orange, and then click on the second. You can only "
	"connect an input port (on the upper side of a module) with an output "
	"port (on the lower side of a module). If you want to assign a fixed "
	"value to a port (or disconnect it), do so by double clicking on the "
	"port."
msgstr	""

#: index.docbook:40
msgid	"Tutorial"
msgstr	""

#: index.docbook:43
msgid	"Step 1"
msgstr	""

#: index.docbook:45
msgid	"Start &artsbuilder;."
msgstr	""

#: index.docbook:49
msgid	"You need a Synth&lowbar;AMAN&lowbar;PLAY-module to hear the output "
	"you are creating. So create a Synth&lowbar;AMAN&lowbar;PLAY-module "
	"by selecting <menuchoice><guimenu>Modules</guimenu> "
	"<guisubmenu>Synthesis</guisubmenu> <guisubmenu>SoundIO</guisubmenu> "
	"<guisubmenu>Synth&lowbar;AMAN&lowbar;PLAY</guisubmenu></menuchoice> "
	"and clicking on the empty module space. Put it below the fifth line "
	"or so, because we'll add some stuff above."
msgstr	""

#: index.docbook:59
msgid	"The module will have a parameter <parameter>title</parameter> "
	"(leftmost port), and <parameter>autoRestoreID</parameter> (besides "
	"the leftmost port) for finding it. To fill these out, doubleclick on "
	"these ports, select constant value and type "
	"<userinput>tutorial</userinput> in the edit box. Click "
	"<guibutton>OK</guibutton> to apply."
msgstr	""

#: index.docbook:67
msgid	"Select <menuchoice><guimenu>File</guimenu><guimenuitem>Execute "
	"structure</guimenuitem> </menuchoice>. You will hear absolutely "
	"nothing. The play module needs some input yet... ;) If you have "
	"listened to the silence for a while, click <guibutton>OK</guibutton> "
	"and go to Step 2"
msgstr	""

#: index.docbook:77
msgid	"Step 2"
msgstr	""

#: index.docbook:79
msgid	"Create a Synth&lowbar;WAVE&lowbar;SIN module (from <menuchoice> "
	"<guimenu>Modules</guimenu> <guimenuitem>Synthesis</guimenuitem> "
	"<guimenuitem>Waveforms</guimenuitem></menuchoice>) and put it above "
	"the Synth&lowbar;AMAN&lowbar;PLAY module. (Leave one line space in "
	"between)."
msgstr	""

#: index.docbook:86
msgid	"As you see, it produces some output, but requires a "
	"<guilabel>pos</guilabel> as input. First lets put the output to the "
	"speakers. Click on the <guilabel>out</guilabel> port of the "
	"Synth&lowbar;WAVE&lowbar;SIN and then on the "
	"<guilabel>left</guilabel> port of Synth&lowbar;AMAN&lowbar;PLAY. "
	"Voila, you have connected two modules."
msgstr	""

#: index.docbook:95
msgid	"All oscillators in &arts; don't require a frequency as input, but a "
	"position in the wave. The position should be between 0 and 1, which "
	"maps for a standard Synth&lowbar;WAVE&lowbar;SIN object to the range "
	"0..2*pi. To generate oscillating values from a frequency, a "
	"Synth&lowbar;FREQUENCY modules is used."
msgstr	""

#: index.docbook:103
msgid	"Create a Synth&lowbar;FREQUENCY module (from <menuchoice> "
	"<guimenu>Modules</guimenu> <guimenu>Synthesis</guimenu> "
	"<guimenu>Oscillation &amp; Modulation</guimenu> </menuchoice>) and "
	"connect it's <quote>pos</quote> output to the <quote>pos</quote> "
	"input of your Synth&lowbar;WAVE&lowbar;SIN. Specify the frequency "
	"port of the FREQUENCY generator as constant value 440."
msgstr	""

#: index.docbook:113
msgid	"Select <menuchoice><guimenu>File</guimenu><guimenuitem>Execute "
	"structure</guimenuitem></menuchoice>. You will hear a sinus wave at "
	"440 Hz on one of your speakers. If you have listened to it for a "
	"while, click <guibutton>OK</guibutton> and go to Step 3."
msgstr	""

#: index.docbook:123
msgid	"Step 3"
msgstr	""

#: index.docbook:125
msgid	"Ok, it would be nicer if you would hear the sin wave on both "
	"speakers. Connect the right port of Synth&lowbar;PLAY to the "
	"outvalue of the Synth&lowbar;WAVE&lowbar;SIN as well."
msgstr	""

#: index.docbook:131
msgid	"Create a Synth&lowbar;SEQUENCE object (from "
	"<menuchoice><guimenu>Modules</guimenu> "
	"<guisubmenu>Synthesis</guisubmenu><guisubmenu>Midi &amp; "
	"Sequencing</guisubmenu></menuchoice>). It should be at the top of "
	"the screen. If you need more room you can move the other modules by "
	"selecting them (to select multiple modules use &Shift;), and "
	"dragging them around."
msgstr	""

#: index.docbook:140
msgid	"Now connect the frequency output of Synth&lowbar;SEQUENCE to the "
	"frequency input of the Synth&lowbar;FREQUENCY module. Then specify "
	"the sequence speed as constant value 0.13 (the speed is the leftmost "
	"port)."
msgstr	""

#: index.docbook:146
msgid	"Now go to the rightmost port (sequence) of Synth&lowbar;SEQUENCE and "
	"type in as constant value <userinput>A-3;C-4;E-4;C-4;</userinput> "
	"this specifies a sequence. More to that in the Module Reference."
msgstr	""

#: index.docbook:152
msgid	"Synth&lowbar;SEQUENCE really <emphasis>needs</emphasis> a sequence "
	"and the speed. Without that you'll perhaps get core dumps."
msgstr	""

#: index.docbook:158
msgid	"Select <menuchoice><guimenu>File</guimenu><guimenuitem>Execute "
	"Structure</guimenuitem></menuchoice>. You will hear a nice sequence "
	"playing. If you have enjoyed the feeling, click "
	"<guibutton>OK</guibutton> and go to Step 4."
msgstr	""

#: index.docbook:167
msgid	"Step 4"
msgstr	""

#: index.docbook:169
msgid	"Create a Synth&lowbar;PSCALE module (from "
	"<menuchoice><guimenu>Modules</guimenu> "
	"<guisubmenu>Synthesis</guisubmenu> "
	"<guisubmenu>Envelopes</guisubmenu> </menuchoice>). Disconnect the "
	"outvalue of the SIN wave by doubleclicking it and choosing "
	"<guilabel>not connected</guilabel>. Connect"
msgstr	""

#: index.docbook:176
msgid	"The SIN outvalue to the PSCALE invalue"
msgstr	""

#: index.docbook:176
msgid	"The PSCALE outvalue to the AMAN_PLAY left"
msgstr	""

#: index.docbook:176
msgid	"The PSCALE outvalue to the AMAN_PLAY right"
msgstr	""

#: index.docbook:176
msgid	"The SEQUENCE pos to the PSCALE pos"
msgstr	""

#: index.docbook:190
msgid	"Finally, set the PSCALE top to some value, for instance 0.1."
msgstr	""

#: index.docbook:194
msgid	"How that works now: The Synth&lowbar;SEQUENCE gives additional "
	"information about the position of the note it is playing right now, "
	"while 0 means just started and 1 means finished. The "
	"Synth&lowbar;PSCALE module will scale the audio stream that is "
	"directed through it from a volume 0 (silent) to 1 (original "
	"loudness) back to 0 (silent). According to the position. The "
	"position where the peak should occur can be given as pos. 0.1 means "
	"that after 10&percnt; of the note has been played, the volume has "
	"reached its maximum, and starts decaying afterwards."
msgstr	""

#: index.docbook:206
msgid	"Select <menuchoice><guimenu>File</guimenu><guimenuitem>Execute "
	"Structure</guimenuitem></menuchoice>. You will hear a nice sequence "
	"playing. If you have enjoyed the feeling, click "
	"<guibutton>OK</guibutton> and go to Step 5."
msgstr	""

#: index.docbook:215
msgid	"Step 5: Starting to beam data around ;)"
msgstr	""

#: index.docbook:217
msgid	"Start another &artsbuilder;"
msgstr	""

#: index.docbook:219
msgid	"Put a Synth&lowbar;AMAN&lowbar;PLAY into it, configure it to a sane "
	"name. Put a Synth&lowbar;BUS&lowbar;DOWNLINK into it and:"
msgstr	""

#: index.docbook:223
msgid	"Set Synth&lowbar;BUS&lowbar;DOWNLINK bus to audio (that is just a "
	"name, call it fred if you like)"
msgstr	""

#: index.docbook:223
msgid	"Connect Synth&lowbar;BUS&lowbar;DOWNLINK left to "
	"Synth&lowbar;AMAN&lowbar;PLAY left"
msgstr	""

#: index.docbook:223
msgid	"Connect Synth&lowbar;BUS&lowbar;DOWNLINK right to "
	"Synth&lowbar;AMAN&lowbar;PLAY right"
msgstr	""

#: index.docbook:244
msgid	"Start executing the structure. As expected, you hear nothing, ... "
	"not yet."
msgstr	""

#: index.docbook:249
msgid	"Go back to the structure with the Synth&lowbar;WAVE&lowbar;SIN stuff "
	"and replace the Synth&lowbar;AMAN&lowbar;PLAY module by an "
	"Synth&lowbar;BUS&lowbar;UPLINK, and configure the name to audio (or "
	"fred if you like). Deleting modules works with selecting them and "
	"choosing <menuchoice><guimenu>Edit</guimenu> "
	"<guimenuitem>delete</guimenuitem></menuchoice> from the menu (or "
	"pressing the <keycap>Del</keycap> key)."
msgstr	""

#: index.docbook:259
msgid	"Hit <menuchoice><guimenu>File</guimenu> <guilabel>Execute "
	"structure</guilabel></menuchoice>. You will hear the sequence with "
	"scaled notes, transported over the bus."
msgstr	""

#: index.docbook:265
msgid	"If you want to find out why something like this can actually be "
	"useful, click <guibutton>OK</guibutton> (in the &artsbuilder; that "
	"is executing the Synth&lowbar;SEQUENCE stuff, you can leave the "
	"other one running) and go to Step 6."
msgstr	""

#: index.docbook:274
msgid	"Step 6: Beaming for advanced users"
msgstr	""

#: index.docbook:276
msgid	"Choose "
	"<menuchoice><guimenu>File</guimenu><guimenuitem>Rename</guimenuitem> "
	"</menuchoice> structure from the menu of the artsbuilder which "
	"contains the Synth&lowbar;SEQUENCE stuff, and call it tutorial. Hit "
	"<guibutton>OK</guibutton>."
msgstr	""

#: index.docbook:283
msgid	"Choose <menuchoice><guimenu>File</guimenu> "
	"<guimenuitem>Save</guimenuitem> </menuchoice>"
msgstr	""

#: index.docbook:288
msgid	"Start yet another &artsbuilder; and choose "
	"<menuchoice><guimenu>File</guimenu><guimenuitem>Load</guimenuitem> "
	"</menuchoice>, and load the tutorial again."
msgstr	""

#: index.docbook:294
msgid	"Now you can select "
	"<menuchoice><guimenu>File</guimenu><guimenuitem>Execute "
	"structure</guimenuitem> </menuchoice>in both &artsbuilder;s having "
	"that structure. You'll now hear two times the same thing. Depending "
	"on the time when you start it it will sound more or less nice."
msgstr	""

#: index.docbook:302
msgid	"Another thing that is good to do at this point in time is: start "
	"&noatun;, and play some <literal role=\"extension\">mp3</literal>. "
	"Start &artscontrol;. Go to "
	"<menuchoice><guimenu>View</guimenu><guimenuitem>View audio "
	"manager</guimenuitem></menuchoice>. What you will see is &noatun; "
	"and your <quote>tutorial</quote> playback structure playing "
	"something. The nice thing you can do is this: doubleclick on "
	"&noatun;. You'll now get a list of destinations. And see? You can "
	"assign &noatun; to send it's output via the audio bus your tutorial "
	"playback structure provides."
msgstr	""

#: index.docbook:316
msgid	"Step 7: Midi synthesis"
msgstr	""

#: index.docbook:318
msgid	"Finally, now you should be able to turn your sin wave into an real "
	"instrument. This only makes sense if you have something handy that "
	"could send &MIDI; events to &arts;. I'll describe here how you can "
	"use some external keyboard, but a midibus aware sequence like "
	"&brahms; will work as well."
msgstr	""

#: index.docbook:326
msgid	"First of all, clean up on your desktop until you only have one "
	"&artsbuilder; with the sine wave structure running (not executing). "
	"Then, three times go to <menuchoice><guimenu>Ports</guimenu> "
	"<guisubmenu>Create IN audio signal</guisubmenu></menuchoice>, and "
	"three times to <menuchoice><guimenu>Ports</guimenu> "
	"<guisubmenu>Create OUT audio signal</guisubmenu></menuchoice>. Place "
	"the ports somewhere."
msgstr	""

#: index.docbook:335
msgid	"Finally, go to <menuchoice><guimenu>Ports</guimenu> <guilabel>Change "
	"positions and names</guilabel></menuchoice> and call the ports "
	"frequency, velocity, pressed, left, right, done."
msgstr	""

#: index.docbook:341
msgid	"Finally, you can delete the Synth&lowbar;SEQUENCE module, and rather "
	"connect connect the frequency input port of the structure to the "
	"Synth&lowbar;FREQUENCY frequency port. Hm. But what do do about pos?"
msgstr	""

#: index.docbook:345
msgid	"We don't have this, because with no algorithm in the world, you can "
	"predict when the user will release the note he just pressed on the "
	"midi keyboard. So we rather have a pressed parameter instead that "
	"just indicates wether the user still holds down the key. (pressed = "
	"1: key still hold down, pressed = 0: key released)"
msgstr	""

#: index.docbook:353
msgid	"That means the Synth&lowbar;PSCALE object also must be replaced now. "
	"Plug in a Synth&lowbar;ENVELOPE&lowbar;ADSR instead (from "
	"<menuchoice><guimenu>Modules</guimenu> "
	"<guisubmenu>Synthesis</guisubmenu> "
	"<guisubmenu>Envelopes</guisubmenu> </menuchoice>). Connect:"
msgstr	""

#: index.docbook:361
msgid	"The pressed structure input to the ADSR active"
msgstr	""

#: index.docbook:361
msgid	"The SIN outvalue to the ADSR invalue"
msgstr	""

#: index.docbook:361
msgid	"The ADSR outvalue to the left structure output"
msgstr	""

#: index.docbook:361
msgid	"The ADSR outvalue to the right structure output"
msgstr	""

#: index.docbook:375
msgid	"Set the parameters attack to 0.1, decay to 0.2, sustain to 0.7, "
	"release to 0.1."
msgstr	""

#: index.docbook:380
msgid	"Another thing we need to think of is that the instrument structure "
	"somehow should know when it is ready playing and then be cleaned up, "
	"because otherwise it would be never stopped even if the note has "
	"been released. Fortunately, the ADSR envelope knows when the will be "
	"nothing to hear anymore, since it anyway scales the signal to zero "
	"at some point after the note has been released."
msgstr	""

#: index.docbook:389
msgid	"This is indicated by setting the done output to 1. So connect this "
	"to the done output of the structure. The structure will be removed "
	"as soon as done goes up to 1."
msgstr	""

#: index.docbook:395
msgid	"Rename your structure to instrument_tutorial (from "
	"<menuchoice><guimenu> File</guimenu> <guimenuitem>Rename "
	"structure</guimenuitem></menuchoice>. Then, save it using save as "
	"(the default name offered should be instrument_tutorial now)."
msgstr	""

#: index.docbook:400
msgid	"Start artscontrol, and go to "
	"<menuchoice><guimenu>View</guimenu><guimenuitem>Midi "
	"Manager</guimenuitem></menuchoice>, and choose "
	"<menuchoice><guimenu>Add</guimenu><guimenuitem>aRts Synthesis Midi "
	"Output</guimenuitem></menuchoice>. Finally, you should be able to "
	"select your instrument (tutorial) here."
msgstr	""

#: index.docbook:408
msgid	"Open a terminal and type "
	"<userinput><command>midisend</command></userinput>. You'll see that "
	"<command>midisend</command> and the instrument are listed now in the "
	"&arts; &MIDI; manager. After selecting both and hitting "
	"<guibutton>connect</guibutton>, we're finally done. Take your "
	"keyboard and start playing (of course it should be connected to your "
	"computer)."
msgstr	""

#: index.docbook:419
msgid	"Suggestions"
msgstr	""

#: index.docbook:421
msgid	"You now should be able to work with &arts;. Here are a few tips what "
	"you could try to improve with your structures now:"
msgstr	""

#: index.docbook:426
msgid	"Try using other things than a SIN wave. When you plug in a TRI wave, "
	"you will most likely think the sound is not too nice. But try "
	"appending a SHELVE&lowbar;CUTOFF filter right after the TRI wave to "
	"cut the frequenciesabove a certain frequency (try something like "
	"1000 Hz, or even better two times the input frequency or input "
	"frequency+200Hz or something like that)."
msgstr	""

#: index.docbook:426
msgid	"Try using more than one oscillator. Synth&lowbar;XFADE can be used "
	"to cross fade (mix) two signals, Synth&lowbar;ADD to add them."
msgstr	""

#: index.docbook:426
msgid	"Try setting the frequencies of the oscillators to not exactly the "
	"same value, that gives nice oscillations."
msgstr	""

#: index.docbook:426
msgid	"Experiment with more than one envelope."
msgstr	""

#: index.docbook:426
msgid	"Try synthesizing instruments with different output left and right."
msgstr	""

#: index.docbook:426
msgid	"Try postprocessing the signal after it comes out the bus downlink. "
	"You could for instance mix a delayed version of the signal to the "
	"original to get an echo effect."
msgstr	""

#: index.docbook:426
msgid	"Try using the velocity setting (its the strength with which the note "
	"has been pressed, you could also say volume). The special effect is "
	"always when this not only modifies the volume of the resulting "
	"signal, but as well the sound of the instrument (for instance the "
	"cutoff frequency)."
msgstr	""

#: index.docbook:426
msgid	"<para>...</para>"
msgstr	""

#: index.docbook:479
msgid	"If you have created something great, please consider providing it "
	"for the &arts; web page. Or for inclusion into the next release."
msgstr	""

#: index.docbook:488
msgid	"Examples"
msgstr	""

#: index.docbook:490
msgid	"&artsbuilder; comes with several examples, which can be opened "
	"through <menuchoice><guimenu>File</guimenu><guimenuitem>Open "
	"Example...</guimenuitem> </menuchoice>. Some of them are in the "
	"directory, some of them (which for some reason don't work with the "
	"current release) are left in the todo directory."
msgstr	""

#: index.docbook:497
msgid	"The examples fall into several categories:"
msgstr	""

#: index.docbook:501
msgid	"Standalone examples illustrating how to use each of the built-in "
	"arts modules (named <filename>example_*.arts</filename>). These "
	"typically send some output to a sound card."
msgstr	""

#: index.docbook:501
msgid	"Instruments built from lower level arts modules (named "
	"<filename>instrument_*.arts</filename>). These following a standard "
	"convention for input and output ports so they can be used by the "
	"&MIDI; manager in &artscontrol;."
msgstr	""

#: index.docbook:501
msgid	"Templates for creating new modules (names "
	"<filename>template_*.arts</filename>)."
msgstr	""

#: index.docbook:501
msgid	"Effects which can be used as reusable building blocks (named "
	"<filename>effect_*.arts</filename>) [ all in todo ]"
msgstr	""

#: index.docbook:501
msgid	"Mixer elements used for creating mixers, including graphical "
	"controls (named <filename>mixer_element_*.arts</filename>). [ all in "
	"todo ]"
msgstr	""

#: index.docbook:501
msgid	"Miscellaneous modules that don't fit into any of the above "
	"categories."
msgstr	""

#: index.docbook:547
msgid	"Detailed Description Of Each Module:"
msgstr	""

#: index.docbook:547
msgid	"example_stereo_beep.arts"
msgstr	""

#: index.docbook:547
msgid	"Generates a 440Hz sine wave tone in the left channel and an 880Hz "
	"sine wave tone in the right channel, and sends it to the sound card "
	"output. This is referenced in the &arts; documentation."
msgstr	""

#: index.docbook:547
msgid	"example_sine.arts"
msgstr	""

#: index.docbook:547
msgid	"Generates a 440 Hz sine wave."
msgstr	""

#: index.docbook:547
msgid	"example_pulse.arts"
msgstr	""

#: index.docbook:547
msgid	"Generates a 440 Hz pulse wave with a 20% duty cycle."
msgstr	""

#: index.docbook:547
msgid	"example_softsaw.arts"
msgstr	""

#: index.docbook:547
msgid	"Generates a 440 Hz sawtooth wave."
msgstr	""

#: index.docbook:547
msgid	"example_square.arts"
msgstr	""

#: index.docbook:547
msgid	"Generates a 440 Hz square wave."
msgstr	""

#: index.docbook:547
msgid	"example_tri.arts"
msgstr	""

#: index.docbook:547
msgid	"Generates a 440 Hz triangle wave."
msgstr	""

#: index.docbook:547
msgid	"example_noise.arts"
msgstr	""

#: index.docbook:547
msgid	"Generates white noise."
msgstr	""

#: index.docbook:547
msgid	"example_dtmf1.arts"
msgstr	""

#: index.docbook:547
msgid	"Generates a dual tone by producing 697 and 1209 Hz sine waves, "
	"scaling them by 0.5, and adding them together. This is the DTMF tone "
	"for the digit \"1\" on a telephone keypad."
msgstr	""

#: index.docbook:547
msgid	"example_atan_saturate.arts"
msgstr	""

#: index.docbook:547
msgid	"Runs a triangle wave through the atan saturate filter."
msgstr	""

#: index.docbook:547
msgid	"example_autopanner.arts"
msgstr	""

#: index.docbook:547
msgid	"Uses an autopanner to pan a 400 Hz sine wave between the left and "
	"right speakers at a 2 Hz rate."
msgstr	""

#: index.docbook:547
msgid	"example_brickwall.arts"
msgstr	""

#: index.docbook:547
msgid	"Scales a sine wave by a factor of 5 and then runs it through a "
	"brickwall limiter."
msgstr	""

#: index.docbook:547
msgid	"example_bus.arts"
msgstr	""

#: index.docbook:547
msgid	"Downlinks from a bus called <quote>Bus</quote> and uplinks to the "
	"bus <quote>out_soundcard</quote> with the left and right channels "
	"reversed."
msgstr	""

#: index.docbook:547
msgid	"example_cdelay.arts"
msgstr	""

#: index.docbook:547
msgid	"Downlinks from a bus called <quote>Delay</quote>, uplinks the right "
	"channel through a 0.5 second cdelay, and the left channel unchanged. "
	"You can use &artscontrol; to connect the effect to a sound player "
	"and observe the results."
msgstr	""

#: index.docbook:547
msgid	"example_delay.arts"
msgstr	""

#: index.docbook:547
msgid	"This is the same as <filename>example_cdelay.arts</filename> but "
	"used the delay effect."
msgstr	""

#: index.docbook:547
msgid	"example_capture_wav.arts"
msgstr	""

#: index.docbook:547
msgid	"This uses the Synth_CAPTURE_WAV to save a 400 Hz sine wave as a wav "
	"file. Run the module for a few seconds, and then examine the file "
	"created in <filename class=\"directory\">/tmp</filename>. You can "
	"play the file with a player such as "
	"<application>kaiman</application>."
msgstr	""

#: index.docbook:547
msgid	"example_data.arts"
msgstr	""

#: index.docbook:547
msgid	"This uses the Data module to generate a constant stream of the value "
	"<quote>3</quote> and sends it to a Debug module to periodically "
	"display it. It also contains a Nil module, illustrating how it can "
	"be used to do nothing at all."
msgstr	""

#: index.docbook:547
msgid	"example_adsr.arts"
msgstr	""

#: index.docbook:547
msgid	"Shows how to create a simple instrument sound using the Envelope "
	"Adsr module, repetitively triggered by a square wave."
msgstr	""

#: index.docbook:547
msgid	"example_fm.arts"
msgstr	""

#: index.docbook:547
msgid	"This uses the FM Source module to generate a 440 Hz sine wave which "
	"is frequency modulated at a 5 Hz rate."
msgstr	""

#: index.docbook:547
msgid	"example_freeverb.arts"
msgstr	""

#: index.docbook:547
msgid	"This connects the Freeverb effect from a bus downlink to a bus "
	"outlink. You can use artscontrol to connect the effect to a sound "
	"player and observe the results."
msgstr	""

#: index.docbook:547
msgid	"example_flanger.arts"
msgstr	""

#: index.docbook:547
msgid	"This implements a simple flanger effect (it doesn't appear to work "
	"yet, though)."
msgstr	""

#: index.docbook:547
msgid	"example_moog.arts"
msgstr	""

#: index.docbook:547
msgid	"This structure combines the two channels from a bus into one, passes "
	"it though the Moog VCF filter, and sends it out the out_soundcard "
	"bus."
msgstr	""

#: index.docbook:547
msgid	"example_pitch_shift.arts"
msgstr	""

#: index.docbook:547
msgid	"This structure passes the left channel of sound card data through "
	"the Pitch Shift effect. Adjust the speed parameter to vary the "
	"effect."
msgstr	""

#: index.docbook:547
msgid	"example_rc.arts"
msgstr	""

#: index.docbook:547
msgid	"This structure passes a white noise generator though an RC filter "
	"and out to the sound card. By viewing the FFT Scope display in "
	"artscontrol you can see how this varies from an unfiltered noise "
	"waveform."
msgstr	""

#: index.docbook:547
msgid	"example_sequence.arts"
msgstr	""

#: index.docbook:547
msgid	"This demonstrates the Sequence module by playing a sequence of notes."
msgstr	""

#: index.docbook:547
msgid	"example_shelve_cutoff.arts"
msgstr	""

#: index.docbook:547
msgid	"This structure passes a white noise generator though a Shelve Cutoff "
	"filter and out to the sound card. By viewing the FFT Scope display "
	"in artscontrol you can see how this varies from an unfiltered noise "
	"waveform."
msgstr	""

#: index.docbook:547
msgid	"example_equalizer.arts"
msgstr	""

#: index.docbook:547
msgid	"This demonstrates the Std_Equalizer module. It boosts the low and "
	"high frequencies by 6 dB."
msgstr	""

#: index.docbook:547
msgid	"example_tremolo.arts"
msgstr	""

#: index.docbook:547
msgid	"This demonstrates the Tremolo effect. It modulates the left and "
	"right channels using a 10 Hz tremolo."
msgstr	""

#: index.docbook:547
msgid	"example_xfade.arts"
msgstr	""

#: index.docbook:547
msgid	"This example mixes 440 and 880 Hz sine waves using a cross fader. "
	"Adjust the value of the cross fader's percentage input from -1 to 1 "
	"to control the mixing of the two signals."
msgstr	""

#: index.docbook:547
msgid	"example_pscale.arts"
msgstr	""

#: index.docbook:547
msgid	"This illustrates the Pscale module (I'm not sure if this is a "
	"meaningful example)."
msgstr	""

#: index.docbook:547
msgid	"example_play_wav.arts"
msgstr	""

#: index.docbook:547
msgid	"This illustrates the Play Wave module. You will need to enter the "
	"full path to a <literal role=\"extension\">.wav</literal> file as "
	"the filename parameter."
msgstr	""

#: index.docbook:547
msgid	"example_multi_add.arts"
msgstr	""

#: index.docbook:547
msgid	"This shows the Multi Add module which accepts any number of inputs. "
	"It sums three Data modules which produce inputs of 1, 2, and 3, and "
	"displays the result 6."
msgstr	""
