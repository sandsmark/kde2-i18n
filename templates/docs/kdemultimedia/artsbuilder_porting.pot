# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR Free Software Foundation, Inc.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid	""
msgstr	"Project-Id-Version: PACKAGE VERSION\n"
	"POT-Creation-Date: 2001-02-09 01:25+0100\n"
	"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
	"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
	"Language-Team: LANGUAGE <LL@li.org>\n"
	"MIME-Version: 1.0\n"
	"Content-Type: text/plain; charset=utf-8\n"
	"Content-Transfer-Encoding: ENCODING\n"

#: index.docbook:7
msgid	"Porting Applications to &arts;"
msgstr	""

#: index.docbook:10
msgid	"Using &artsdsp;"
msgstr	""

#: index.docbook:12
msgid	"The &artsdsp; utility, <link linkend=\"artsdsp\">described "
	"previously</link>, allows most legacy sound applications that talk "
	"to the audio devices directly, to work properly under &arts;. "
	"Applications written to use the Enlightenment Sound Daemon "
	"(<application>esd</application>) will also work in most cases by "
	"running <application>esd</application> under &artsdsp;."
msgstr	""

#: index.docbook:21
msgid	"This makes a good short term solution to porting existing "
	"applications to &kde;. However, it does not allow the application to "
	"directly take advantage of all of the power of &arts;, such as using "
	"modules and multimedia streams other than digital audio. If the "
	"application ges beyond simple playing of sound files, it usually "
	"makes sense to add native support for &arts; to the application."
msgstr	""

#: index.docbook:30
msgid	"Using &arts; also means that application does not have to do as much "
	"work -- it can leverage the functions in &arts; to handle issues "
	"like codecs for different media formats and control of the sound "
	"hardware."
msgstr	""

#: index.docbook:39
msgid	"Adding Native &arts; support"
msgstr	""

#: index.docbook:41
msgid	"When using &arts;, you have a number of different <link "
	"linkend=\"arts-apis\"><acronym>API</acronym>s</link> to choose from. "
	"The decision of which to use depends on a number of factors, "
	"including what type of streaming media is used (sound, &MIDI;, &CD; "
	"audio, &etc;), the <acronym>API</acronym> features required, and "
	"whether it is written in C++. In most cases the choice should be "
	"relatively obvious based on the required features."
msgstr	""

#: index.docbook:51
msgid	"For cross-platform portability, applications that need to run on "
	"environments other than &kde; cannot rely on &arts; being present. "
	"Using the plug-ins paradigm is a good way to support different "
	"multimedia environments. Making the plug-in <acronym>API</acronym> "
	"open and documented (especially for closed source applications) also "
	"has the advantage of allowing someone other than the application "
	"developer to implement an &arts; plug-in."
msgstr	""
