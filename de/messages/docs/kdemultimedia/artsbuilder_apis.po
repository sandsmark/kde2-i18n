# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR Free Software Foundation, Inc.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2001-02-09 01:25+0100\n"
"PO-Revision-Date: 2001-06-11 18:22MET\n"
"Last-Translator: Frank Schütte <f.schuette@t-online.de>\n"
"Language-Team: deutsch <kde-i18n-de@list.kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 0.9.2alpha\n"

#: index.docbook:7
msgid "&arts; Application Programming Interfaces"
msgstr "&arts; Application Programming Interfaces"

#: index.docbook:10
msgid "Overview"
msgstr "Überblick"

#: index.docbook:11
msgid ""
"aRts is not only a piece of software, it also provides a variety of APIs for "
"a variety of purposes. In this section, I will try to describe the \"big "
"picture\", a brief glance what those APIs are supposed to do, and how they "
"interact."
msgstr ""
"aRts is not only a piece of software, it also provides a variety of APIs for "
"a variety of purposes. In this section, I will try to describe the \"big "
"picture\", a brief glance what those APIs are supposed to do, and how they "
"interact."

#: index.docbook:18
msgid ""
"There is one important distinction to make: most of the APIs are <emphasis> "
"language and location independant</emphasis> because they are specified as "
"<emphasis>mcopidl</emphasis>. That is, you can basically use the services "
"they offer from any language, implement them in any language, and you will "
"not have to care whether you are talking to local or remote objects. Here is "
"a list of these first:"
msgstr ""
"There is one important distinction to make: most of the APIs are <emphasis> "
"language and location independant</emphasis> because they are specified as "
"<emphasis>mcopidl</emphasis>. That is, you can basically use the services "
"they offer from any language, implement them in any language, and you will "
"not have to care whether you are talking to local or remote objects. Here is "
"a list of these first:"

#: index.docbook:28
msgid "core.idl"
msgstr "core.idl"

#: index.docbook:28
msgid ""
"Basic definitions that form the core of the MCOP functionality, such as the "
"protocol itself, definitions of the object, the trader, the flow system and "
"so on."
msgstr ""
"Basic definitions that form the core of the MCOP functionality, such as the "
"protocol itself, definitions of the object, the trader, the flow system and "
"so on."

#: index.docbook:28
msgid "artsflow.idl"
msgstr "artsflow.idl"

#: index.docbook:28
msgid ""
"These contain the flow system you will use for connecting audio streams, the "
"definition of <emphasis>Arts::SynthModule</emphasis> which is the base for "
"any interface that has streams, and finally a few useful audio objects"
msgstr ""
"These contain the flow system you will use for connecting audio streams, the "
"definition of <emphasis>Arts::SynthModule</emphasis> which is the base for "
"any interface that has streams, and finally a few useful audio objects"

#: index.docbook:28
msgid "kmedia2.idl"
msgstr "kmedia2.idl"

#: index.docbook:28
msgid ""
"Here, an object that can play a media, <emphasis>Arts::PlayObject</emphasis>"
" gets defined. Media players such as the KDE media player noatun will be "
"able to play any media for which a PlayObject can be found. So it makes "
"sense to implement PlayObjects for various formats (such as mp3, mpg video, "
"midi, wav, ...) on that base, and there are a lot already."
msgstr ""
"Here, an object that can play a media, <emphasis>Arts::PlayObject</emphasis>"
" gets defined. Media players such as the KDE media player noatun will be "
"able to play any media for which a PlayObject can be found. So it makes "
"sense to implement PlayObjects for various formats (such as mp3, mpg video, "
"midi, wav, ...) on that base, and there are a lot already."

#: index.docbook:28
msgid "soundserver.idl"
msgstr "soundserver.idl"

#: index.docbook:28
msgid ""
"Here, an interface for the system wide sound server artsd is defined. The "
"interface is called <emphasis>Arts::SoundServer</emphasis>"
", which implements functionality like accepting streams from the network, "
"playing samples, creating custom other aRts objects and so on. Network "
"transparency is implied due to the use of MCOP (as for everything else here)."
msgstr ""
"Here, an interface for the system wide sound server artsd is defined. The "
"interface is called <emphasis>Arts::SoundServer</emphasis>"
", which implements functionality like accepting streams from the network, "
"playing samples, creating custom other aRts objects and so on. Network "
"transparency is implied due to the use of MCOP (as for everything else here)."

#: index.docbook:28
msgid "artsbuilder.idl"
msgstr "artsbuilder.idl"

#: index.docbook:28
msgid ""
"This module defines basic flow graph functionality, that is, combining "
"simpler objects to more complex ones, by defining a graph of them. It "
"defines the basic interface <emphasis>Arts::StructureDesc</emphasis>, "
"<emphasis>Arts::ModuleDesc</emphasis> and "
"<emphasis>Arts::PortDesc</emphasis> which contain a description of a "
"structure, module, and port. There is also a way to get a \"living network "
"of objects\" out of these connection and value descriptions, using a factory."
msgstr ""
"This module defines basic flow graph functionality, that is, combining "
"simpler objects to more complex ones, by defining a graph of them. It "
"defines the basic interface <emphasis>Arts::StructureDesc</emphasis>, "
"<emphasis>Arts::ModuleDesc</emphasis> and "
"<emphasis>Arts::PortDesc</emphasis> which contain a description of a "
"structure, module, and port. There is also a way to get a \"living network "
"of objects\" out of these connection and value descriptions, using a factory."

#: index.docbook:28
msgid "artsmidi.idl"
msgstr "artsmidi.idl"

#: index.docbook:28
msgid ""
"This module defines basic midi functionality, like objects that produce midi "
"events, what is a midi event, an <emphasis>Arts::MidiManager</emphasis> to "
"connect the producers and consumers of midi events, and so on. As always "
"network transparency implied."
msgstr ""
"This module defines basic midi functionality, like objects that produce midi "
"events, what is a midi event, an <emphasis>Arts::MidiManager</emphasis> to "
"connect the producers and consumers of midi events, and so on. As always "
"network transparency implied."

#: index.docbook:28
msgid "artsmodules.idl"
msgstr "artsmodules.idl"

#: index.docbook:28
msgid ""
"Here are various additional filters, oscillators, effects, delays and so on, "
"everything required for real useful signal processing, and to build complex "
"instruments and effects out of these basic building blocks."
msgstr ""
"Here are various additional filters, oscillators, effects, delays and so on, "
"everything required for real useful signal processing, and to build complex "
"instruments and effects out of these basic building blocks."

#: index.docbook:28
msgid "artsgui.idl"
msgstr "artsgui.idl"

#: index.docbook:28
msgid ""
"This cares about visual objects. It defines the basic type <emphasis> "
"Arts::Widget</emphasis>"
" from which all GUI modules derive. This will produce toolkit independency, "
"and ... visual GUI editing, and serializable GUIs. Also, as the GUI elements "
"have normal attributes, their values can be straight forward connected to "
"some signal processing modules. (I.e. the value of a slider to the cutoff of "
"a filter). As always: network transparent."
msgstr ""
"This cares about visual objects. It defines the basic type <emphasis> "
"Arts::Widget</emphasis>"
" from which all GUI modules derive. This will produce toolkit independency, "
"and ... visual GUI editing, and serializable GUIs. Also, as the GUI elements "
"have normal attributes, their values can be straight forward connected to "
"some signal processing modules. (I.e. the value of a slider to the cutoff of "
"a filter). As always: network transparent."

#: index.docbook:128
msgid ""
"Where possible, aRts itself is implemented using IDL. On the other hand, "
"there are some <emphasis>language specific</emphasis> APIs, using either "
"plain C++ or plain C. It is usually wise to use IDL interfaces where "
"possible, and the other APIs where necessary. Here is a list of language "
"specific APIs:"
msgstr ""
"Where possible, aRts itself is implemented using IDL. On the other hand, "
"there are some <emphasis>language specific</emphasis> APIs, using either "
"plain C++ or plain C. It is usually wise to use IDL interfaces where "
"possible, and the other APIs where necessary. Here is a list of language "
"specific APIs:"

#: index.docbook:135
msgid "KNotify, KAudioPlayer (included in libkdecore)"
msgstr "KNotify, KAudioPlayer (included in libkdecore)"

#: index.docbook:135
msgid ""
"These are convenience KDE APIs for the simple and common common case, where "
"you just want to play a sample. The APIs are plain C++, Qt/KDE optimized, "
"and as easy as it can get."
msgstr ""
"These are convenience KDE APIs for the simple and common common case, where "
"you just want to play a sample. The APIs are plain C++, Qt/KDE optimized, "
"and as easy as it can get."

#: index.docbook:135
msgid "libartsc"
msgstr "libartsc"

#: index.docbook:135
msgid ""
"Plain C interface for the sound server. Very useful for porting legacy "
"applications."
msgstr ""
"Plain C interface for the sound server. Very useful for porting legacy "
"applications."

#: index.docbook:135
msgid "libmcop"
msgstr "libmcop"

#: index.docbook:135
msgid ""
"Here all magic for MCOP happens. The library contains the basic things you "
"need to know for writing a simple MCOP application, the dispatcher, timers, "
"iomanagement, but also the internals to make the MCOP protocol itself work."
msgstr ""
"Here all magic for MCOP happens. The library contains the basic things you "
"need to know for writing a simple MCOP application, the dispatcher, timers, "
"iomanagement, but also the internals to make the MCOP protocol itself work."

#: index.docbook:135
msgid "libartsflow"
msgstr "libartsflow"

#: index.docbook:135
msgid ""
"Besides the implementation of artsflow.idl, some useful utilities like "
"sampling rate conversion."
msgstr ""
"Besides the implementation of artsflow.idl, some useful utilities like "
"sampling rate conversion."

#: index.docbook:135
msgid "libqiomanager"
msgstr "libqiomanager"

#: index.docbook:135
msgid ""
"Integration of MCOP into the Qt event loop, when you write Qt applications "
"using MCOP."
msgstr ""
"Integration of MCOP into the Qt event loop, when you write Qt applications "
"using MCOP."

#: index.docbook:193
msgid "knotify"
msgstr "knotify"

#: index.docbook:194 index.docbook:200 index.docbook:206 index.docbook:212
#: index.docbook:218 index.docbook:224
msgid "<para> </para>"
msgstr "<para> </para>"

#: index.docbook:199
msgid "kaudioplayer"
msgstr "kaudioplayer"

#: index.docbook:205
msgid "libkmid"
msgstr "libkmid"

#: index.docbook:211
msgid "kmedia2"
msgstr "kmedia2"

#: index.docbook:217
msgid "sound server"
msgstr "sound server"

#: index.docbook:223
msgid "artsflow"
msgstr "artsflow"

#: index.docbook:229
msgid "C <acronym>API</acronym>"
msgstr "C <acronym>API</acronym>"

#: index.docbook:232
msgid "Introduction"
msgstr "Einleitung"

#: index.docbook:234
msgid ""
"The &arts; C <acronym>API</acronym> was designed to make it easy to writing "
"and port plain C applications to the &arts; sound server. It provides "
"streaming functionality (sending sample streams to "
"<application>artsd</application>"
"), either blocking or non-blocking. For most applications you simply remove "
"the few system calls that deal with your audio device and replace them with "
"the appropriate &arts; calls."
msgstr ""
"The &arts; C <acronym>API</acronym> was designed to make it easy to writing "
"and port plain C applications to the &arts; sound server. It provides "
"streaming functionality (sending sample streams to "
"<application>artsd</application>"
"), either blocking or non-blocking. For most applications you simply remove "
"the few system calls that deal with your audio device and replace them with "
"the appropriate &arts; calls."

#: index.docbook:241
msgid ""
"I did two ports as a proof of concept: <application>mpg123</application>"
" and <application>quake</application>. You can get the patches from <ulink "
"url=\"http://space.twc.de/~stefan/kde/download/artsc-patches.tar.gz\">"
"here</ulink>. Feel free to submit your own patches to the maintainer of "
"&arts; or of multimedia software packages so that they can integrate &arts; "
"support into their code."
msgstr ""
"I did two ports as a proof of concept: <application>mpg123</application>"
" and <application>quake</application>. You can get the patches from <ulink "
"url=\"http://space.twc.de/~stefan/kde/download/artsc-patches.tar.gz\">"
"here</ulink>. Feel free to submit your own patches to the maintainer of "
"&arts; or of multimedia software packages so that they can integrate &arts; "
"support into their code."

#: index.docbook:251
msgid "Quick Walkthrough"
msgstr "Quick Walkthrough"

#: index.docbook:253
msgid ""
"Sending audio to the sound server with the <acronym>API</acronym> is very "
"simple:"
msgstr ""
"Sending audio to the sound server with the <acronym>API</acronym> is very "
"simple:"

#: index.docbook:255
msgid "include the header file using <userinput>#include &lt;artsc.h&gt;</userinput>"
msgstr "include the header file using <userinput>#include &lt;artsc.h&gt;</userinput>"

#: index.docbook:255
msgid "initialize the <acronym>API</acronym> with <function>arts_init()</function>"
msgstr "initialize the <acronym>API</acronym> with <function>arts_init()</function>"

#: index.docbook:255
msgid "create a stream with <function>arts_play_stream()</function>"
msgstr "create a stream with <function>arts_play_stream()</function>"

#: index.docbook:255
msgid "configure specific parameters with <function>arts_stream_set()</function>"
msgstr "configure specific parameters with <function>arts_stream_set()</function>"

#: index.docbook:255
msgid "write sampling data to the stream with <function>arts_write()</function>"
msgstr "write sampling data to the stream with <function>arts_write()</function>"

#: index.docbook:255
msgid "close the stream with <function>arts_close_stream()</function>"
msgstr "close the stream with <function>arts_close_stream()</function>"

#: index.docbook:255
msgid "free the <acronym>API</acronym> with <function>arts_free()</function>"
msgstr "free the <acronym>API</acronym> with <function>arts_free()</function>"

#: index.docbook:272
msgid "Here is a small example program that illustrates this:"
msgstr "Here is a small example program that illustrates this:"

#: index.docbook:274
msgid ""
"#include &lt;stdio.h&gt;\n"
"#include &lt;artsc.h&gt;\n"
"int main()\n"
"{\n"
"    arts_stream_t stream;\n"
"    char buffer[8192];\n"
"    int bytes;\n"
"    int errorcode;\n"
"\n"
"    errorcode = arts_init();\n"
"    if (errorcode &lt; 0)\n"
"    {\n"
"        fprintf(stderr, \"arts_init error: %s\\n\", "
"arts_error_text(errorcode));\n"
"        return 1;\n"
"    }\n"
"\n"
"    stream = arts_play_stream(44100, 16, 2, \"artsctest\");\n"
"\n"
"    while((bytes = fread(buffer, 1, 8192, stdin)) &gt; 0)\n"
"    {\n"
"        errorcode = arts_write(stream, buffer, bytes);\n"
"        if(errorcode &lt; 0)\n"
"        {\n"
"            fprintf(stderr, \"arts_write error: %s\\n\", "
"arts_error_text(errorcode));\n"
"            return 1;\n"
"        }\n"
"    }\n"
"\n"
"    arts_close_stream(stream);\n"
"    arts_free();\n"
"\n"
"    return 0;\n"
"}"
msgstr ""
"#include &lt;stdio.h&gt;\n"
"#include &lt;artsc.h&gt;\n"
"int main()\n"
"{\n"
"    arts_stream_t stream;\n"
"    char buffer[8192];\n"
"    int bytes;\n"
"    int errorcode;\n"
"\n"
"    errorcode = arts_init();\n"
"    if (errorcode &lt; 0)\n"
"    {\n"
"        fprintf(stderr, \"arts_init error: %s\\n\", "
"arts_error_text(errorcode));\n"
"        return 1;\n"
"    }\n"
"\n"
"    stream = arts_play_stream(44100, 16, 2, \"artsctest\");\n"
"\n"
"    while((bytes = fread(buffer, 1, 8192, stdin)) &gt; 0)\n"
"    {\n"
"        errorcode = arts_write(stream, buffer, bytes);\n"
"        if(errorcode &lt; 0)\n"
"        {\n"
"            fprintf(stderr, \"arts_write error: %s\\n\", "
"arts_error_text(errorcode));\n"
"            return 1;\n"
"        }\n"
"    }\n"
"\n"
"    arts_close_stream(stream);\n"
"    arts_free();\n"
"\n"
"    return 0;\n"
"}"

#: index.docbook:312
msgid "Compiling and Linking: <application>artsc-config</application>"
msgstr "Compiling and Linking: <application>artsc-config</application>"

#: index.docbook:314
msgid ""
"To easily compile and link programs using the &arts; C "
"<acronym>API</acronym>, the <application>artsc-config</application> utility "
"is provided which knows which libraries you need to link and where the "
"includes are. It is called using"
msgstr ""
"To easily compile and link programs using the &arts; C "
"<acronym>API</acronym>, the <application>artsc-config</application> utility "
"is provided which knows which libraries you need to link and where the "
"includes are. It is called using"

#: index.docbook:319
msgid "<command>artsc-config</command> <option>--libs</option>"
msgstr "<command>artsc-config</command> <option>--libs</option>"

#: index.docbook:323
msgid "to find out the libraries and"
msgstr "to find out the libraries and"

#: index.docbook:325
msgid "<command>artsc-config</command> <option>--cflags</option>"
msgstr "<command>artsc-config</command> <option>--cflags</option>"

#: index.docbook:329
msgid ""
"to find out additional C compiler flags. The example above could have been "
"compiled using the command line:"
msgstr ""
"to find out additional C compiler flags. The example above could have been "
"compiled using the command line:"

#: index.docbook:333
msgid ""
"<userinput><command>cc</command> <option>-o artsctest artsctest.c "
"`artsc-config --cflags` `artsc-config --libs`</option></userinput>\n"
"\n"
"<userinput><command>cc</command> <option>-o artsctest</option> "
"<option>artsctest.c</option> <option>`artsc-config --cflags`</option> "
"<option>`artsc-config --libs`</option></userinput>"
msgstr ""
"<userinput><command>cc</command> <option>-o artsctest artsctest.c "
"`artsc-config --cflags` `artsc-config --libs`</option></userinput>\n"
"\n"
"<userinput><command>cc</command> <option>-o artsctest</option> "
"<option>artsctest.c</option> <option>`artsc-config --cflags`</option> "
"<option>`artsc-config --libs`</option></userinput>"

#: index.docbook:342
msgid "Library Reference"
msgstr "Library Reference"

#: index.docbook:344
msgid "[TODO: generate the documentation for artsc.h using kdoc]"
msgstr "[TODO: generate the documentation for artsc.h using kdoc]"
